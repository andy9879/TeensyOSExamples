/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.3-dev */

#ifndef PB_LED_STRIP_DATA_PB_H_INCLUDED
#define PB_LED_STRIP_DATA_PB_H_INCLUDED
#include "pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _LEDData_MessageType {
    LEDData_MessageType_KELVIN_DATA = 0,
    LEDData_MessageType_RGB_DATA = 1,
    LEDData_MessageType_HSV_DATA = 2
} LEDData_MessageType;

/* Struct definitions */
typedef struct _LEDData {
    LEDData_MessageType message_type;
    uint32_t kelvin_red_hue;
    uint32_t green_saturation;
    uint32_t blue_value;
} LEDData;


/* Helper constants for enums */
#define _LEDData_MessageType_MIN LEDData_MessageType_KELVIN_DATA
#define _LEDData_MessageType_MAX LEDData_MessageType_HSV_DATA
#define _LEDData_MessageType_ARRAYSIZE ((LEDData_MessageType)(LEDData_MessageType_HSV_DATA+1))


/* Initializer values for message structs */
#define LEDData_init_default                     {_LEDData_MessageType_MIN, 0, 0, 0}
#define LEDData_init_zero                        {_LEDData_MessageType_MIN, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define LEDData_message_type_tag                 1
#define LEDData_kelvin_red_hue_tag               2
#define LEDData_green_saturation_tag             3
#define LEDData_blue_value_tag                   4

/* Struct field encoding specification for nanopb */
#define LEDData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    message_type,      1) \
X(a, STATIC,   SINGULAR, UINT32,   kelvin_red_hue,    2) \
X(a, STATIC,   SINGULAR, UINT32,   green_saturation,   3) \
X(a, STATIC,   SINGULAR, UINT32,   blue_value,        4)
#define LEDData_CALLBACK NULL
#define LEDData_DEFAULT NULL

extern const pb_msgdesc_t LEDData_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define LEDData_fields &LEDData_msg

/* Maximum encoded size of messages (where known) */
#define LEDData_size                             20

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
